//			第28組 
//資訊四甲 10527120 林育戎
//財金四乙 10447236 連盈媛 
#include <iostream>
#include <iomanip>
#include <fstream>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include <cstdlib>
#include <iterator>  
#include <algorithm>
#include <sstream>
#include <queue> 

using namespace std ;
static double unexist, exist ;

struct JobType {  
	    char id1[10] ; 
        char id2[10] ; 
        float weight ;
};

struct AType {  // 任務一所需 
	    string id ; 
        float weight ;
};

struct AList {
	string id ;
	vector<AType> aroundList ;
	bool hasPassed ;
};

class AdjacentLists {
	private:
		vector<JobType> JList ;  //讀入檔案用 
		
	public :
		vector<AList> adjList ; 
		
		bool Readfild (	string nof ) {
			char tempid1[10], tempid2[10] ;
			float flo ;	
			JobType tempJT ;
			fstream inputfile ; // 暫存檔 
			string inputfile_name = "pairs" + nof + ".bin" ; // 將"input"與檔名連接	
			const char* name = inputfile_name.c_str() ;
			
		//-------------------------------------------------------------------------- //讀檔		
			if ( FILE * file = fopen(name, "rb" ) ) {	 // 判斷檔案是否存在 
				for ( int i = 0 ; !feof(file) ; i++ ) {

					fread( tempid1 ,10 ,1, file) ; 
					fread( tempid2 ,10 ,1, file) ; 
					fread( &flo,sizeof(flo),1,file) ;
					
					

					strcpy ( tempJT.id1 , tempid1 ) ;   // 將資料寫入JList 
					strcpy ( tempJT.id2 , tempid2 ) ; 
					tempJT.weight = flo ; 
					JList.push_back(tempJT);
					
					//cout << "[" << i << "]" << "  " << JList.at(i).id1 << "  " << JList.at(i).id2 << "  " << JList.at(i).weight << endl ;		
					
				} // for
                fclose( file ) ;  // 檔案內容讀取完後關閉 
			} // if 
			else{
				cout << endl << name << " does not exist!!!" << endl << endl ;
				return  false ; 
			} // else
	    } // Readfild()
	    
		void sort( vector<AType> & list, int sel ) {     //希爾排序法	
			int gap = list.size()/2 ;
			for ( ; gap > 0 ; gap = gap / 2 ) {
				for ( int i = gap ; i < list.size() ; i ++ ) {
					if ( sel == 1 )	for ( int q = i ; q >= gap && list.at(q).id < list.at(q-gap).id ; q-=gap )	swap( list[q], list[q-gap] ) ;
					else	for ( int q = i ; q >= gap && list.at(q).weight > list.at(q-gap).weight ; q-=gap )	swap( list[q], list[q-gap] ) ;
				} // for
			} // for
			
		} // sort()
		
		void insert( char id1[10], char id2[10], float weight ) {
			int j = 0 ;
			bool found = false ;
			AList newList ;
	    	AType newNode ;
			for ( ; j < adjList.size() && !found ; j ++ )	if ( strcmp( adjList.at(j).id.c_str(), id1 ) == 0 )	found = true ;
			if ( found ) {
	    		j -- ;
    			newNode.id.assign(id2) ;
				newNode.weight = weight ;
				adjList.at(j).aroundList.push_back(newNode) ;
			} // if
			else {
				newList.id.assign(id1) ;
				newNode.id.assign(id2) ;
				newNode.weight = weight ;
				newList.aroundList.push_back(newNode) ;
				newList.hasPassed = false ;
				adjList.push_back(newList) ;
			} // else
			
		} // insert() 
	    
	    void build() {
	    	
	    	for ( int i = 0 ; i < JList.size()-1 ; i ++ ) { 
	    		insert( JList.at(i).id1, JList.at(i).id2, JList.at(i).weight ) ;
	    		//insert( JList.at(i).id2, JList.at(i).id1, JList.at(i).weight ) ;
			} // for
			
			//-----------------------------------------------------------------------------//  做排序
			for ( int gap = adjList.size()/2 ; gap > 0 ; gap = gap / 2 ) {
				for ( int i = gap ; i < adjList.size() ; i ++ ) {
					for ( int q = i ; q >= gap && adjList.at(q).id < adjList.at(q-gap).id ; q-=gap )	swap( adjList[q], adjList[q-gap] ) ;
				} // for
			} // for
			for ( int i = 0 ; i < adjList.size() ; i ++ )	sort( adjList.at(i).aroundList, 1 ) ;
	    	
		} // bulid()
		
		void outputFile( string nof ) {
			FILE *fanswer = NULL;
			string inputfile_name = "pairs" + nof + ".adj" ; // 將"input"與檔名連接	
			const char* name = inputfile_name.c_str() ;
			fanswer = fopen( name, "w") ;
			
			int sumNode = 0 ;
			fprintf( fanswer, "<<< There are %d IDs in total. >>>", adjList.size() ) ;
			for ( int i = 0 ; i < adjList.size() ; i ++ ) {
				fprintf ( fanswer, " \n[%3d] " , i+1  ) ;
				fprintf ( fanswer, "%s: \n" , adjList.at(i).id.c_str()  ) ;
				for ( int j = 0 ; j < adjList.at(i).aroundList.size() ; j ++ ) {
					fprintf ( fanswer, "\t(%2d) %s,  %4g "  , j+1 ,adjList.at(i).aroundList.at(j).id.c_str(), adjList.at(i).aroundList.at(j).weight ) ;
					if ( (j+1)%10 == 0 )	fprintf( fanswer, "\n") ;
				} // for
				sumNode = sumNode + adjList.at(i).aroundList.size() ;
			} // for	
			fprintf( fanswer, "\n<<< There are %d nodes in total. >>>", sumNode ) ;
			cout << endl << "<<< " << JList.size()-1 << " pairs => " << sumNode << " nodes >>>" << endl << endl ;
			cout << "Adjacency lists are written into a file..." << endl << endl ;
			cout << "<<< There are " << sumNode << " nodes in total. >>>" << endl << endl ;
			
			fclose( fanswer ) ;
		} // outputFile
		
};

struct ComponentNode {
	string id;
	vector<AType> group ; // 相連學號(任務一) 
	vector<AType> connect ; // 相連學號(任務二) 
	ComponentNode *next ; 
	bool hasPassed = false ; // 輸出用
};

class Traverse {
	private:
		ComponentNode *root ;
		ComponentNode *nowPtr ;
		ComponentNode *answer ;
		
	public:
		
		
		void initTraverse() {  //  初始化 
	        root = NULL ;
	        nowPtr = NULL ;
		answer = NULL ;
        } // initTraverse
        
		bool duplicate( string id , ComponentNode *now   ) { // 判斷是否重複 
			ComponentNode * temp = now ;
			if(temp != NULL){
				if ( id == temp->id )  // 是否有相同的 
						return true ;			
				for( int i = 0 ; i < temp->connect.size() ; i++ ){
					if ( id == temp->connect.at(i).id ) 
						return true ;
				} // for 		
					
			} //else 
			return false ;
		} // found
		
		ComponentNode* check( string id){
			
			for( ComponentNode* temp = nowPtr ;temp != NULL ; temp = temp ->next ){
				if ( id == temp->id ) 
					return temp;
			} // for 
		}
        
        void assignToNode(AdjacentLists & aList, ComponentNode *& temp){ // 將任務一的list assign到任務二的指標 
        	ComponentNode *store ;
        	store = temp ; // 暫存temp的頭 
        	for(int i = 0 ; i < aList.adjList.size() ; i++){
        		if(i != 0){  
        			temp->next = new ComponentNode();
        			temp = temp ->next;
				}
        		temp->id = aList.adjList.at(i).id ;
        		temp->group.assign(aList.adjList.at(i).aroundList.begin(), aList.adjList.at(i).aroundList.end());
			}
			temp = store ; // 還原temp 
		}
		void clearQueue(queue<string> &queue){
			std::queue<string> empty;
			swap(empty, queue) ;
		}
        
        void build(AdjacentLists & aList ){
			queue<string> q;
			nowPtr = new ComponentNode();
			assignToNode(aList, nowPtr) ;
			
			ComponentNode* temp = nowPtr ; // 用備份來跑 
			first = new ComponentNode() ; 
			answer = root ; // 設定head 
			
			for(int i = 0; temp!=NULL ; i++, temp = temp->next){
				
				if(i>0){ // 創建新結點 
					answer ->next = new ComponentNode() ;
					answer = answer -> next ;
				}
				
				clearQueue(q); // 清空queue 
				answer->id.assign(temp->id);
				q.push(temp->id);
				
				while( !q.empty() ){ // queue還沒清空 

					ComponentNode* found = check( q.front() ) ; // 檢查是否有通訊
					q.pop(); //有的話pop掉並檢查是否重複 
					for(int i = 0 ; i < found -> group.size(); i++){
						
						if(!duplicate(found->group.at(i).id , answer)){ // 假設沒有重複 

							AType tempid ;
							tempid.id.assign(found->group.at(i).id); 
							answer->connect.push_back(tempid); // 放入connect清單中  
							q.push(found->group.at(i).id); // 將通訊清單剩餘的丟進來檢查 
							
						}
					}
							
							
				}
				aList.sort(answer->connect, 1) ;
			}
			
			answer = root ; // 返回head 
		}
		
		void outputFile( string nof, AdjacentLists & aList  ) {
			int i = 1 ;
			int num[aList.adjList.size()] ; // 暫存人數 
			FILE *fanswer = NULL;
			string inputfile_name = "pairs" + nof + ".cnt" ; // 將"input"與檔名連接	
			const char* name = inputfile_name.c_str() ;	    	
			fanswer = fopen( name, "w") ;
			
			answer = root ; // 回到head 
			fprintf( fanswer, "<<< There are %d IDs in total. >>>\n", aList.adjList.size() ) ;
			
			
			for(int i = 0; i < aList.adjList.size() && answer!= NULL ; i++){ // 取得size 
				num[i] = answer->connect.size();
				answer = answer->next ;
			}
			
			sort(num, num + aList.adjList.size(), greater<int>()); // 降序排序 
								
			answer = root ; // 回到head 
			
			while( i < aList.adjList.size() ){
				for (; answer != NULL ; answer = answer->next) {
					if( answer->connect.size() == num[i-1] && answer->hasPassed != true ){ // 由大到小印出 
						fprintf ( fanswer, "[%3d] %s(%d): \n" , i, answer->id.c_str() , answer->connect.size() ) ;
						for ( int j = 0 ; j < answer->connect.size() ; j ++ ) {
							fprintf ( fanswer, "\t(%2d) %s"  , j+1, answer->connect.at(j).id.c_str() ) ;
							if ( (j+1)% 10 == 0 )	{
								fprintf( fanswer, "\n") ;
							} // if
						} // for
						i++; 
						answer->hasPassed = true ;
						answer = root ;
						fprintf( fanswer, "\n") ;
					}
				} // for		
				answer = root ;	
			}
			
			fclose( fanswer ) ;
		} // outputFile
		
};


int main() { 
	string nof = "1" ;
	int ran = 1 ;
	while( nof != "0" && ran != 0 ) {
		AdjacentLists aList ;
		Traverse DEF ;
		DEF.initTraverse() ;
		cin >> nof ;
		if ( nof == "0" )  ran = 0 ;
		else if ( aList.Readfild( nof ) ) {
			aList.build() ;
			aList.outputFile( nof ) ;
			cout << "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" << endl ;
			cout << "Mission 2: Find connected components" << endl ;
			cout << "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" << endl << endl ;
			cout << "~~~ Connected Components ~~~" ;
			DEF.build( aList ) ;
			DEF.outputFile( nof ) ;
			cout << endl << endl << "[0]Quit or [Any other]continue?" << endl ;
			cin >> nof ;			
		} // else if	 
	} // while		
	
} // main() 



